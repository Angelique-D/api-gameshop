// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Game {
  gameId Int @id @default(autoincrement())
  name String @db.VarChar(65)
  description String @db.VarChar(255)
  image String @db.VarChar(255)
  price Decimal @db.Decimal(5, 2) @default(0)
  releasedate DateTime @db.Date()
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  types TypeOnGame[]
  basket quantityGameOnBasket[]
  order quantityGameOnOrder[]
}

model Type {
  typeId Int @id @default(autoincrement())
  name String @db.VarChar(65)
  games TypeOnGame[]
}

model TypeOnGame {
  game Game @relation(fields: [gameId], references: [gameId])
  gameId Int
  type Type @relation(fields: [typeId], references: [typeId])
  typeId Int

  @@id([gameId, typeId])
}

model User {
  userId Int @id @default(autoincrement())
  username String @db.VarChar(65)
  email String @db.VarChar(255) @unique
  password String @db.VarChar(255)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  posts Post[] @relation("user_posts")
  comments Comment[] @relation("user_comments")
  orders Order[] @relation("user_orders")
  address Address?
}

model Address {
  addressId Int @id @default(autoincrement())
  address String @db.VarChar(255)
  additionalAddress String @db.VarChar(255)
  zipCode String @db.VarChar(65)
  city String @db.VarChar(65)
  updateAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [userId])
  userId Int @unique
}

model Post {
  postId Int @id @default(autoincrement())
  title String @db.VarChar(255)
  body String
  userId Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user User @relation("user_posts", fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  comments Comment[] @relation("post_comments")
}

model Comment {
  commentId Int @id @default(autoincrement())
  content String @db.VarChar(255)
  postId Int
  userId Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  post Post @relation("post_comments", fields: [postId], references: [postId], onUpdate: Cascade, onDelete: Cascade)
  user User @relation("user_comments", fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
}

model Basket {
  basketId Int @id @default(autoincrement())
  sum Decimal @db.Decimal(10, 2)
  games quantityGameOnBasket[]
}

model Order {
  orderId Int @id @default(autoincrement())
  order_date DateTime @default(now())
  sum Decimal @db.Decimal(10, 2)
  userId Int
  user User @relation("user_orders", fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  games quantityGameOnOrder[]
}

model quantityGameOnBasket {
  game Game @relation(fields: [gameId], references: [gameId])
  gameId Int
  basket Basket @relation(fields: [basketId], references: [basketId])
  basketId Int
  quantity Int

  @@id([gameId, basketId])
}

model quantityGameOnOrder {
  game Game @relation(fields: [gameId], references: [gameId])
  gameId Int
  order Order @relation(fields: [orderId], references: [orderId])
  orderId Int
  quantity Int

  @@id([gameId, orderId])
}